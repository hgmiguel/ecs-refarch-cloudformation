Description: >
    This template deploys an ECS cluster to the provided VPC and subnets
    using an Auto Scaling Group

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    KeyName:
        Description: Key for ssh access
        Type: String

    InstanceType:
        Description: Which instance type should we use to build the ECS cluster?
        Type: String
        Default: c4.large

    ClusterSize:
        Description: How many ECS hosts do you want to initially deploy?
        Type: Number
        Default: 4

    VPC:
        Description: Choose which VPC this ECS cluster should be deployed to
        Type: AWS::EC2::VPC::Id

    Subnets:
        Description: Choose which subnets this ECS cluster should be deployed to
        Type: String

    SecurityGroup:
        Description: Select the Security Group to use for the ECS cluster hosts
        Type: AWS::EC2::SecurityGroup::Id

    PageName:
        Description: only uses with de zip
        Type: String

Mappings:

    # These are the latest ECS optimized AMIs as of Jan 2018:
    #
    #   amzn-ami-2017.09.g-amazon-ecs-optimized
    #   ECS agent:    1.16.2
    #   Docker:       17.09.1-ce
    #   ecs-init:     1.16.2-1
    #
    # You can find the latest available on this page of our documentation:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
    # (note the AMI identifier is region specific)

    AWSRegionToAMI:
        us-east-2:
            AMI: ami-ce1c36ab
        us-east-1:
            AMI: ami-428aa838
        us-west-2:
            AMI: ami-decc7fa6
        us-west-1:
            AMI: ami-74262414
        eu-west-3:
            AMI: ami-9aef59e7
        eu-west-2:
            AMI: ami-67cbd003
        eu-west-1:
            AMI: ami-1d46df64
        eu-central-1:
            AMI: ami-509a053f
        ap-northeast-2:
            AMI: ami-c212b2ac
        ap-northeast-1:
            AMI: ami-872c4ae1
        ap-southeast-2:
            AMI: ami-58bb443a
        ap-southeast-1:
            AMI: ami-910d72ed
        ca-central-1:
            AMI: ami-435bde27
        ap-south-1:
            AMI: ami-00491f6f
        sa-east-1:
            AMI: ami-af521fc3

Resources:

    EC2Image:
        Type: AWS::EC2::Instance 
        Properties:
            ImageId:  !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
            KeyName: !Ref KeyName
            InstanceType: !Ref InstanceType
            SecurityGroupIds:
                - !Ref SecurityGroup
            IamInstanceProfile: !Ref ECSInstanceProfile
            SubnetId: !Ref Subnets
            UserData:
                "Fn::Base64": !Sub |
                    #!/bin/bash
                    yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
                    yum install -y aws-cfn-bootstrap
                    #/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
                    #/opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup

        Metadata:
            AWS::CloudFormation::Init:
                config:
                    packages:
                        yum:
                            awslogs: []


                    commands:
                        02_create_config_dir:
                            command: mkdir /config
                        03_get_config:
                          command: !Sub aws s3 cp --recursive s3://hgmiguel.mx.${PageName}/ /config/
                        04_uncompress_config:
                          cwd: /config
                          command: !Sub tar xvzf ${PageName}.tar.gz 
                        05_mysql_data:
                          command: mkdir /data
                    files:
                        "/etc/cfn/cfn-hup.conf":
                            mode: 000400
                            owner: root
                            group: root
                            content: !Sub |
                                [main]
                                stack=${AWS::StackId}
                                region=${AWS::Region}

                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
                            content: !Sub |
                                [cfn-auto-reloader-hook]
                                triggers=post.update
                                path=Resources.ECSLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration

                    services:

                        "/etc/awslogs/awscli.conf":
                            content: !Sub |
                                [plugins]
                                cwlogs = cwlogs
                                [default]
                                region = ${AWS::Region}

                        "/etc/awslogs/awslogs.conf":
                            content: !Sub |
                                [general]
                                state_file = /var/lib/awslogs/agent-state


                        sysvinit:
                            cfn-hup:
                                enabled: true
                                ensureRunning: true
                                files:
                                    - /etc/cfn/cfn-hup.conf
                                    - /etc/cfn/hooks.d/cfn-auto-reloader.conf
                            awslogs:
                                enabled: true
                                ensureRunning: true
                                files:
                                    - /etc/awslogs/awslogs.conf
                                    - /etc/awslogs/awscli.conf

    # This IAM Role is attached to all of the ECS hosts. It is based on the default role
    # published here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
    #
    # You can add other IAM policy statements here to allow access from your ECS hosts
    # to other AWS services. Please note that this role will be used by ALL containers
    # running on the ECS host.

    ECSRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            RoleName: !Sub ${EnvironmentName}-ECSRole-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "ec2.amazonaws.com"
                        }
                    }]
                }
            Policies:
                - PolicyName: ecs-service
                  PolicyDocument: |
                    {
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "ecs:CreateCluster",
                                "ecs:DeregisterContainerInstance",
                                "ecs:DiscoverPollEndpoint",
                                "ecs:Poll",
                                "ecs:RegisterContainerInstance",
                                "ecs:StartTelemetrySession",
                                "ecs:Submit*",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents",
                                "ecr:BatchCheckLayerAvailability",
                                "ecr:BatchGetImage",
                                "ecr:GetDownloadUrlForLayer",
                                "ecr:GetAuthorizationToken",
                                "ssm:DescribeAssociation",
                                "ssm:GetDeployablePatchSnapshotForInstance",
                                "ssm:GetDocument",
                                "ssm:GetManifest",
                                "ssm:GetParameters",
                                "ssm:ListAssociations",
                                "ssm:ListInstanceAssociations",
                                "ssm:PutInventory",
                                "ssm:PutComplianceItems",
                                "ssm:PutConfigurePackageResult",
                                "ssm:UpdateAssociationStatus",
                                "ssm:UpdateInstanceAssociationStatus",
                                "ssm:UpdateInstanceInformation",
                                "ec2messages:AcknowledgeMessage",
                                "ec2messages:DeleteMessage",
                                "ec2messages:FailMessage",
                                "ec2messages:GetEndpoint",
                                "ec2messages:GetMessages",
                                "ec2messages:SendReply",
                                "cloudwatch:PutMetricData",
                                "ec2:DescribeInstanceStatus",
                                "ds:CreateComputer",
                                "ds:DescribeDirectories",
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:DescribeLogGroups",
                                "logs:DescribeLogStreams",
                                "logs:PutLogEvents",
                                "s3:PutObject",
                                "s3:GetObject",
                                "s3:AbortMultipartUpload",
                                "s3:ListMultipartUploadParts",
                                "s3:ListBucket",
                                "s3:ListBucketMultipartUploads"
                            ],
                            "Resource": "*"
                        }]
                    }

    ECSInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles:
                - !Ref ECSRole

    #Outputs:

    #    Cluster:
    #        Description: A reference to the ECS cluster
    #        Value: !Ref ECSCluster
